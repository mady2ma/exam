const { PDFDocument, rgb, StandardFonts } = require('pdf-lib');
const fontkit = require('@pdf-lib/fontkit');
const fs = require('fs');
const path = require('path');
const { compile } = require('latex.js');

class PDFGenerator {
  constructor() {
    this.pdfDoc = null;
    this.currentPage = null;
    this.yPosition = 0;
    this.fonts = {};
    this.schoolLogo = null;
  }

  async init() {
    this.pdfDoc = await PDFDocument.create();
    this.pdfDoc.registerFontkit(fontkit);
    
    // Load fonts
    this.fonts.normal = await this.pdfDoc.embedFont(StandardFonts.Helvetica);
    this.fonts.bold = await this.pdfDoc.embedFont(StandardFonts.HelveticaBold);
    this.fonts.italic = await this.pdfDoc.embedFont(StandardFonts.HelveticaOblique);
    
    // Load custom fonts if needed
    try {
      const fontBytes = fs.readFileSync(path.join(__dirname, 'fonts', 'custom.ttf'));
      this.fonts.custom = await this.pdfDoc.embedFont(fontBytes);
    } catch (err) {
      console.warn('Custom font not found, using standard fonts');
    }
    
    // Load school logo if available
    try {
      const logoBytes = fs.readFileSync(path.join(__dirname, 'assets', 'school-logo.png'));
      this.schoolLogo = await this.pdfDoc.embedPng(logoBytes);
    } catch (err) {
      console.warn('School logo not found');
    }
    
    this.addNewPage();
  }

  addNewPage() {
    this.currentPage = this.pdfDoc.addPage([595, 842]); // A4 size
    this.yPosition = 800; // Start near the top
    
    // Add header
    this.addHeader();
  }

  addHeader() {
    const { width } = this.currentPage.getSize();
    
    // School logo
    if (this.schoolLogo) {
      this.currentPage.drawImage(this.schoolLogo, {
        x: 50,
        y: this.yPosition - 50,
        width: 50,
        height: 50,
      });
    }
    
    // School name
    this.currentPage.drawText('Sample High School', {
      x: this.schoolLogo ? 110 : 50,
      y: this.yPosition - 30,
      size: 16,
      font: this.fonts.bold,
    });
    
    this.yPosition -= 80; // Adjust position after header
  }

  addFooter() {
    const { width } = this.currentPage.getSize();
    
    this.currentPage.drawText(`Generated by Exam Paper Creator - ${new Date().toLocaleDateString()}`, {
      x: 50,
      y: 30,
      size: 10,
      font: this.fonts.normal,
      color: rgb(0.5, 0.5, 0.5),
    });
    
    this.currentPage.drawText(`Page ${this.pdfDoc.getPageCount()}`, {
      x: width - 50,
      y: 30,
      size: 10,
      font: this.fonts.normal,
      color: rgb(0.5, 0.5, 0.5),
    });
  }

  async addTitle(title, subtitle = '') {
    this.currentPage.drawText(title, {
      x: 50,
      y: this.yPosition,
      size: 18,
      font: this.fonts.bold,
    });
    this.yPosition -= 30;
    
    if (subtitle) {
      this.currentPage.drawText(subtitle, {
        x: 50,
        y: this.yPosition,
        size: 14,
        font: this.fonts.normal,
      });
      this.yPosition -= 30;
    }
    
    this.yPosition -= 20; // Extra space after title
  }

  async addQuestion(question, number) {
    // Check if we need a new page
    if (this.yPosition < 100) {
      this.addFooter();
      this.addNewPage();
    }
    
    // Question number and text
    const questionText = `${number}. ${question.questionText}`;
    this.currentPage.drawText(questionText, {
      x: 50,
      y: this.yPosition,
      size: 12,
      font: this.fonts.bold,
      maxWidth: 500,
    });
    this.yPosition -= 20;
    
    // Handle different question types
    switch (question.type) {
      case 'multiple_choice':
        await this.addMultipleChoiceOptions(question);
        break;
      case 'true_false':
        await this.addTrueFalseOptions();
        break;
      case 'short_answer':
        await this.addAnswerSpace(3); // 3 lines for short answer
        break;
      case 'essay':
        await this.addAnswerSpace(10); // 10 lines for essay
        break;
      case 'math_equation':
        await this.addMathEquation(question);
        break;
    }
    
    // Add marks indicator
    this.currentPage.drawText(`[${question.marks} marks]`, {
      x: 520,
      y: this.yPosition + 20, // Align with question
      size: 10,
      font: this.fonts.italic,
    });
    
    this.yPosition -= 20; // Space between questions
  }

  async addMultipleChoiceOptions(question) {
    question.options.forEach((option, index) => {
      const optionText = `${String.fromCharCode(97 + index)}) ${option}`;
      this.currentPage.drawText(optionText, {
        x: 70,
        y: this.yPosition,
        size: 12,
        font: this.fonts.normal,
        maxWidth: 480,
      });
      this.yPosition -= 20;
    });
  }

  async addTrueFalseOptions() {
    this.currentPage.drawText('a) True', {
      x: 70,
      y: this.yPosition,
      size: 12,
      font: this.fonts.normal,
    });
    this.yPosition -= 20;
    
    this.currentPage.drawText('b) False', {
      x: 70,
      y: this.yPosition,
      size: 12,
      font: this.fonts.normal,
    });
    this.yPosition -= 20;
  }

  async addAnswerSpace(lines) {
    const lineHeight = 20;
    const spaceHeight = lines * lineHeight;
    
    this.yPosition -= 10; // Space before answer box
    
    // Draw answer box
    this.currentPage.drawRectangle({
      x: 50,
      y: this.yPosition - spaceHeight,
      width: 500,
      height: spaceHeight,
      borderColor: rgb(0.8, 0.8, 0.8),
      borderWidth: 1,
    });
    
    this.yPosition -= (spaceHeight + 20); // Space after answer box
  }

  async addMathEquation(question) {
    try {
      // Compile LaTeX to SVG
      const latexCode = `\\documentclass{standalone}
                        \\begin{document}
                        ${question.equation}
                        \\end{document}`;
      
      const svg = await compile(latexCode, {
        format: 'svg',
        latex: 'xelatex',
      });
      
      // Convert SVG to PDF and embed
      // Note: This requires additional SVG-to-PDF conversion logic
      // For now, we'll just display the LaTeX code
      this.currentPage.drawText(`LaTeX: ${question.equation}`, {
        x: 70,
        y: this.yPosition,
        size: 12,
        font: this.fonts.normal,
        maxWidth: 480,
      });
      this.yPosition -= 30;
    } catch (err) {
      console.error('Error rendering equation:', err);
      this.currentPage.drawText('[Math equation could not be rendered]', {
        x: 70,
        y: this.yPosition,
        size: 12,
        font: this.fonts.normal,
      });
      this.yPosition -= 20;
    }
  }

  async generate(exam) {
    await this.init();
    
    // Add exam title and metadata
    await this.addTitle(
      exam.title,
      `${exam.subject} - Grade ${exam.gradeLevel}`
    );
    
    // Add instructions
    this.currentPage.drawText('Instructions:', {
      x: 50,
      y: this.yPosition,
      size: 12,
      font: this.fonts.bold,
    });
    this.yPosition -= 20;
    
    const instructions = exam.instructions || 'Answer all questions in the spaces provided. Show all your work.';
    this.currentPage.drawText(instructions, {
      x: 70,
      y: this.yPosition,
      size: 12,
      font: this.fonts.normal,
      maxWidth: 480,
    });
    this.yPosition -= 40;
    
    // Add questions
    for (let i = 0; i < exam.questions.length; i++) {
      await this.addQuestion(exam.questions[i], i + 1);
    }
    
    // Add final footer
    this.addFooter();
    
    // Save and return PDF
    const pdfBytes = await this.pdfDoc.save();
    return pdfBytes;
  }
}

module.exports = PDFGenerator;